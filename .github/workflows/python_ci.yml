# Nome do seu fluxo de trabalho. Aparecerá na aba "Actions" do seu repositório.
name: Python CI/CD Pipeline with Tests

# Define os gatilhos (triggers) que iniciam o workflow.
# Neste caso, a cada 'push' ou 'pull_request' para a branch 'main'.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Define os "trabalhos" (jobs) que serão executados.
jobs:
  build-and-test:
    # O tipo de máquina virtual que será usada. 'ubuntu-latest' é o padrão.
    runs-on: ubuntu-latest

    # Os passos que o job irá executar em sequência.
    steps:
      # 1. Faz o "checkout" do seu código para que o workflow possa acedê-lo.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configura o ambiente Python na versão que estamos a usar.
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3. Instala as dependências do projeto.
      #    Usa o pip para instalar tudo o que está no ficheiro requirements.txt.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install flake8 pytest

      # 4. Faz o "Lint" do código com flake8 para verificar a qualidade.
      #    --count: mostra o número total de erros.
      #    --show-source: mostra a linha de código com erro.
      #    --statistics: mostra estatísticas de erros.
      #    O workflow falhará se encontrar algum erro aqui.
      - name: Lint with flake8
        run: |
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

       # 5. Valida a sintaxe dos arquivos da DAG
      #    Este comando tenta compilar todos os arquivos .py na pasta dags.
      #    Se houver um erro de sintaxe, o workflow falhará aqui.
      - name: Validate Airflow DAGs syntax
        run: |
          python -m compileall dags/

      # 6. Executa Testes Unitários com Pytest
      #    O pytest irá automaticamente encontrar e executar todos os testes
      #    na pasta `tests/`. Se qualquer teste falhar, o workflow falha.
      - name: Run Unit Tests with Pytest
        run: |
          pytest